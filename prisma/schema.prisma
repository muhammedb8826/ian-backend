generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  passwordRT        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  address           String
  first_name        String?
  gender            String             @default("MALE")
  last_name         String?
  middle_name       String?
  phone             String             @unique
  profile           String?
  roles             Role               @default(ADMIN)
  confirm_password  String
  is_active         Boolean            @default(true)
  orderItemNotes    OrderItemNotes[]
  purchaseItemNotes PurchaseItemNote[] @relation("UserNotes")
  salesNotes        SalesItemNote[]    @relation("UserSalesNotes")
  machines          UserMachine[]
  purchaser         purchases[]
  operator          sales[]
}

model machines {
  id          String        @id @default(cuid())
  name        String        @unique
  status      Boolean       @default(true)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserMachine[]
  items       items[]
}

model UserMachine {
  id        String   @id @default(cuid())
  userId    String
  machineId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  machine   machines @relation(fields: [machineId], references: [id])
  user      users    @relation(fields: [userId], references: [id])

  @@unique([userId, machineId])
}

model Pricing {
  id           String       @id @default(cuid())
  itemId       String
  serviceId    String
  sellingPrice Float
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  constant     Boolean      @default(false)
  height       Float?
  width        Float?
  baseUomId    String
  orderItems   OrderItems[]
  uom          UOM          @relation(fields: [baseUomId], references: [id])
  item         items        @relation(fields: [itemId], references: [id])
  service      services     @relation(fields: [serviceId], references: [id])

  @@unique([itemId, serviceId])
}

model services {
  id          String    @id @default(cuid())
  name        String    @unique
  status      Boolean   @default(true)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pricing     Pricing[]
  items       items[]   @relation("itemsToservices")
}

model discounts {
  id          String   @id @default(cuid())
  level       Int
  itemId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  percentage  Float
  unit        Float
  description String?
  items       items    @relation(fields: [itemId], references: [id])

  @@unique([itemId, level])
}

model items {
  id                    String          @id @default(cuid())
  name                  String          @unique
  description           String?
  reorder_level         Int
  initial_stock         Int
  updated_initial_stock Int
  machineId             String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  can_be_purchased      Boolean         @default(true)
  can_be_sold           Boolean         @default(true)
  quantity              Int
  unitCategoryId        String?
  defaultUomId          String?
  purchaseUomId         String?
  attributes            Attribute[]
  operatorStock         OperatorStock[]
  OrderItems            OrderItems[]
  pricing               Pricing[]
  purchases             PurchaseItems[] @relation("PurchaseItemsForItem")
  sales                 SaleItems[]     @relation("SaleItemsForItem")
  discounts             discounts[]
  defaultUom            UOM?            @relation("ItemDefaultUom", fields: [defaultUomId], references: [id])
  machine               machines        @relation(fields: [machineId], references: [id])
  purchaseUom           UOM?            @relation("ItemPurchaseUom", fields: [purchaseUomId], references: [id])
  unitCategory          UnitCategory?   @relation("UnitCategoryToItems", fields: [unitCategoryId], references: [id])
  services              services[]      @relation("itemsToservices")
}

model purchases {
  id            String          @id @default(cuid())
  series        String
  vendorId      String
  status        String
  orderDate     DateTime        @default(now())
  paymentMethod String
  amount        Float
  reference     String
  totalAmount   Float
  totalQuantity Int
  note          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  purchaserId   String
  purchaseItems PurchaseItems[] @relation("PurchaseItemsForPurchase")
  purchaser     users           @relation(fields: [purchaserId], references: [id])
  vendor        vendors         @relation(fields: [vendorId], references: [id])
}

model PurchaseItems {
  id                String             @id @default(cuid())
  purchaseId        String
  itemId            String
  quantity          Int
  unitPrice         Float
  amount            Float
  description       String?
  status            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  uomId             String
  baseUomId         String
  unit              Float
  purchaseItemNotes PurchaseItemNote[] @relation("PurchaseItemNotes")
  item              items              @relation("PurchaseItemsForItem", fields: [itemId], references: [id])
  purchase          purchases          @relation("PurchaseItemsForPurchase", fields: [purchaseId], references: [id])
  uoms              UOM                @relation("ItemPurchasesUnitOfMeasure", fields: [uomId], references: [id])

  @@unique([purchaseId, itemId])
}

model PurchaseItemNote {
  id             String        @id @default(cuid())
  text           String
  userId         String
  date           DateTime
  hour           DateTime
  purchaseItemId String
  purchaseItem   PurchaseItems @relation("PurchaseItemNotes", fields: [purchaseItemId], references: [id])
  user           users         @relation("UserNotes", fields: [userId], references: [id])

  @@index([purchaseItemId])
  @@index([userId])
}

model sales {
  id            String      @id @default(cuid())
  series        String
  operatorId    String
  status        String
  orderDate     DateTime    @default(now())
  note          String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  totalQuantity Int
  saleItems     SaleItems[] @relation("SaleItemsForSale")
  operator      users       @relation(fields: [operatorId], references: [id])
}

model SaleItems {
  id            String          @id @default(cuid())
  saleId        String
  itemId        String
  quantity      Int
  description   String?
  status        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  uomId         String
  baseUomId     String
  unit          Float
  item          items           @relation("SaleItemsForItem", fields: [itemId], references: [id])
  sale          sales           @relation("SaleItemsForSale", fields: [saleId], references: [id])
  uoms          UOM             @relation("ItemSalesUnitOfMeasure", fields: [uomId], references: [id])
  saleItemNotes SalesItemNote[] @relation("SaleItemNotes")
}

model SalesItemNote {
  id         String    @id @default(cuid())
  text       String
  userId     String
  date       DateTime
  hour       DateTime
  saleItemId String
  saleItem   SaleItems @relation("SaleItemNotes", fields: [saleItemId], references: [id])
  user       users     @relation("UserSalesNotes", fields: [userId], references: [id])

  @@index([saleItemId])
  @@index([userId])
}

model OperatorStock {
  id          String   @id @default(cuid())
  itemId      String
  quantity    Int
  description String?
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  uomId       String
  baseUomId   String
  unit        Float
  item        items    @relation(fields: [itemId], references: [id])
  uoms        UOM      @relation(fields: [uomId], references: [id])
}

model vendors {
  id          String      @id @default(cuid())
  fullName    String      @unique
  email       String?     @unique
  phone       String      @unique
  company     String
  address     String
  reference   String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  purchases   purchases[]
}

model UnitCategory {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  constant      Boolean
  constantValue Float
  uoms          UOM[]    @relation("UnitCategoryToUOMs")
  items         items[]  @relation("UnitCategoryToItems")
}

model UOM {
  id             String          @id @default(cuid())
  name           String
  abbreviation   String
  conversionRate Float
  baseUnit       Boolean         @default(false)
  unitCategoryId String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  operatorStock  OperatorStock[]
  orderItems     OrderItems[]
  pricing        Pricing[]
  purchaseItems  PurchaseItems[] @relation("ItemPurchasesUnitOfMeasure")
  saleItems      SaleItems[]     @relation("ItemSalesUnitOfMeasure")
  unitCategory   UnitCategory    @relation("UnitCategoryToUOMs", fields: [unitCategoryId], references: [id])
  defaultUom     items[]         @relation("ItemDefaultUom")
  purchaseUom    items[]         @relation("ItemPurchaseUom")

  @@unique([name, abbreviation, unitCategoryId])
}

model Attribute {
  id        String   @id @default(cuid())
  name      String   @unique
  value     String
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     items    @relation(fields: [itemId], references: [id])

  @@unique([name, itemId])
}

model orders {
  id              String         @id @default(cuid())
  series          String
  customerId      String
  status          String
  orderDate       DateTime       @default(now())
  deliveryDate    DateTime
  totalAmount     Float
  tax             Float
  grandTotal      Float
  totalQuantity   Int
  internalNote    String?
  paymentTermId   String?
  commissionId    String?
  fileNames       String[]
  adminApproval   Boolean
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  salesPartnersId String?
  orderSource     String
  orderItems      OrderItems[]
  commission      commissions?
  customer        customers      @relation(fields: [customerId], references: [id])
  salesPartner    salesPartners? @relation(fields: [salesPartnersId], references: [id])
  paymentTerm     paymentTerms?
}

model OrderItems {
  id             String           @id @default(cuid())
  orderId        String
  itemId         String
  serviceId      String
  width          Float?
  height         Float?
  discount       Float?
  level          Int
  totalAmount    Float
  adminApproval  Boolean
  uomId          String
  quantity       Int
  unitPrice      Float
  description    String?
  status         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isDiscounted   Boolean
  pricingId      String
  baseUomId      String
  unit           Float
  orderItemNotes OrderItemNotes[]
  item           items            @relation(fields: [itemId], references: [id])
  order          orders           @relation(fields: [orderId], references: [id])
  pricing        Pricing          @relation(fields: [pricingId], references: [id])
  uom            UOM              @relation(fields: [uomId], references: [id])

  @@unique([orderId, itemId, serviceId])
}

model OrderItemNotes {
  id          String     @id @default(cuid())
  text        String
  hour        DateTime
  date        DateTime
  userId      String
  orderItemId String
  createdAt   DateTime   @default(now())
  orderItem   OrderItems @relation(fields: [orderItemId], references: [id])
  user        users      @relation(fields: [userId], references: [id])
}

model customers {
  id          String   @id @default(cuid())
  fullName    String
  email       String?  @unique
  phone       String   @unique
  company     String?
  address     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      orders[]
}

model salesPartners {
  id          String        @id @default(cuid())
  fullName    String
  email       String?       @unique
  phone       String        @unique
  company     String?
  address     String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  commissions commissions[]
  orders      orders[]
}

model paymentTerms {
  id              String                @id @default(cuid())
  orderId         String                @unique
  totalAmount     Float
  remainingAmount Float
  status          String
  forcePayment    Boolean
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  order           orders                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  transactions    paymentTransactions[]
}

model paymentTransactions {
  id            String       @id @default(cuid())
  date          DateTime
  paymentTermId String
  paymentMethod String
  reference     String
  amount        Float
  status        String
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  paymentTerm   paymentTerms @relation(fields: [paymentTermId], references: [id], onDelete: Cascade)
}

model commissions {
  id             String                   @id @default(cuid())
  orderId        String                   @unique
  salesPartnerId String
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  totalAmount    Float
  paidAmount     Float
  transactions   commissionTransactions[]
  order          orders                   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  salesPartner   salesPartners            @relation(fields: [salesPartnerId], references: [id], onDelete: Cascade)
}

model commissionTransactions {
  id            String      @id @default(cuid())
  date          DateTime
  amount        Float
  percentage    Float
  commissionId  String
  paymentMethod String
  reference     String
  status        String
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  commission    commissions @relation(fields: [commissionId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  RECEPTION
  GRAPHIC_DESIGNER
  OPERATOR
  FINANCE
  STORE_REPRESENTATIVE
  PURCHASER
}
