generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  password               String
  passwordRT             String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  address                String
  first_name             String?
  gender                 String                  @default("MALE")
  last_name              String?
  middle_name            String?
  phone                  String                  @unique
  profile                String?
  roles                  Role                    @default(ADMIN)
  confirm_password       String
  is_active              Boolean                 @default(true)
  machine_permissions    UserMachinePermission[]
  machines               UserMachine[]
  purchaseRepresentative purchases[]
  operator               sales[]
  notes                  PurchaseItemNote[]      @relation("UserNotes")
  salesNotes             SalesItemNote[]         @relation("UserSalesNotes")
}

model machines {
  id          String        @id @default(cuid())
  name        String        @unique
  status      Boolean       @default(true)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserMachine[]
  items       items[]
}

model UserMachine {
  id        String   @id @default(cuid())
  userId    String
  machineId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  machine   machines @relation(fields: [machineId], references: [id])
  user      users    @relation(fields: [userId], references: [id])

  @@unique([userId, machineId])
}

model services {
  id           String   @id @default(cuid())
  name         String
  itemId       String
  sellingPrice Float
  status       Boolean  @default(true)
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  item         items    @relation("ItemServices", fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, name])
}

model discounts {
  id         String   @id @default(cuid())
  level      Int
  quantity   Int
  percentage Float
  itemId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  item       items    @relation("ItemDiscounts", fields: [itemId], references: [id])

  @@unique([itemId, level])
}

model items {
  id                      String          @id @default(cuid())
  name                    String          @unique
  description             String?
  reorder_level           Int
  initial_stock           Int
  updated_initial_stock   Int
  machineId               String
  unitCategoryId          String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  can_be_purchased        Boolean         @default(true)
  can_be_sold             Boolean         @default(true)
  purchase_price          Float
  selling_price           Float
  purchaseUnitOfMeasureId String?
  saleUnitOfMeasureId     String?
  unitOfMeasureId         String?
  quantity                Int
  machine                 machines        @relation(fields: [machineId], references: [id])
  purchaseUnitOfMeasure   UOM?            @relation("ItemPurchaseUnitOfMeasure", fields: [purchaseUnitOfMeasureId], references: [id])
  saleUnitOfMeasure       UOM?            @relation("ItemSalesUnitOfMeasure", fields: [saleUnitOfMeasureId], references: [id])
  unitOfMeasure           UOM?            @relation("ItemUnitOfMeasure", fields: [unitOfMeasureId], references: [id])
  unitCategory            UnitCategory?   @relation("UnitCategoryToItems", fields: [unitCategoryId], references: [id])
  attributes              Attribute[]
  purchases               PurchaseItems[] @relation("PurchaseItemsForItem")
  sales                   SaleItems[]     @relation("SaleItemsForItem")
  operatorStock           OperatorStock[]
  discounts               discounts[]     @relation("ItemDiscounts")
  services                services[]      @relation("ItemServices") // One-to-many relation
}

model purchases {
  id                       String          @id @default(cuid())
  series                   String
  vendorId                 String
  purchaseRepresentativeId String
  status                   String
  orderDate                DateTime        @default(now())
  paymentMethod            String
  amount                   Float
  reference                String
  totalAmount              Float
  totalQuantity            Int
  note                     String?
  items                    PurchaseItems[] @relation("PurchaseItemsForPurchase")
  vendor                   vendors         @relation(fields: [vendorId], references: [id])
  purchaseRepresentative   users           @relation(fields: [purchaseRepresentativeId], references: [id])
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
}

model PurchaseItems {
  id          String             @id @default(cuid())
  purchaseId  String
  itemId      String
  unitId      String
  quantity    Int
  unitPrice   Float
  amount      Float
  description String?
  status      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  item        items              @relation("PurchaseItemsForItem", fields: [itemId], references: [id])
  purchase    purchases          @relation("PurchaseItemsForPurchase", fields: [purchaseId], references: [id])
  notes       PurchaseItemNote[] @relation("PurchaseItemNotes")
  unit        UOM                @relation("ItemPurchasesUnitOfMeasure", fields: [unitId], references: [id])

  @@unique([purchaseId, itemId])
}

model PurchaseItemNote {
  id     String        @id @default(cuid())
  text   String
  itemId String
  userId String
  date   DateTime
  hour   DateTime
  item   PurchaseItems @relation("PurchaseItemNotes", fields: [itemId], references: [id])
  user   users         @relation("UserNotes", fields: [userId], references: [id])

  @@index([itemId])
  @@index([userId])
}

model sales {
  id            String      @id @default(cuid())
  series        String
  operatorId    String
  status        String
  orderDate     DateTime    @default(now())
  paymentMethod String
  amount        Float
  reference     String
  totalAmount   Float
  totalQuantity Int
  note          String?
  items         SaleItems[] @relation("SaleItemsForSale")
  operator      users       @relation(fields: [operatorId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model SaleItems {
  id          String          @id @default(cuid())
  saleId      String
  itemId      String
  unitId      String
  quantity    Int
  unitPrice   Float
  amount      Float
  description String?
  status      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  item        items           @relation("SaleItemsForItem", fields: [itemId], references: [id])
  sale        sales           @relation("SaleItemsForSale", fields: [saleId], references: [id])
  notes       SalesItemNote[] @relation("SaleItemNotes")
  unit        UOM             @relation("ItemSalesUnitOfMeasure", fields: [unitId], references: [id])
}

model SalesItemNote {
  id     String    @id @default(cuid())
  text   String
  itemId String
  userId String
  date   DateTime
  hour   DateTime
  item   SaleItems @relation("SaleItemNotes", fields: [itemId], references: [id])
  user   users     @relation("UserSalesNotes", fields: [userId], references: [id])

  @@index([itemId])
  @@index([userId])
}

model OperatorStock {
  id          String  @id @default(cuid())
  itemId      String
  unitId      String
  quantity    Int
  unitPrice   Float
  amount      Float
  description String?
  status      String

  item      items    @relation(fields: [itemId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model vendors {
  id          String      @id @default(cuid())
  fullName    String      @unique
  email       String?     @unique
  phone       String      @unique
  company     String
  address     String
  reference   String
  description String?
  purchases   purchases[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model UnitCategory {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String
  constant      Boolean
  constantValue Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  items         items[]  @relation("UnitCategoryToItems") // One-to-many relation
  units         UOM[]    @relation("UnitCategoryToUOMs") // One-to-many relation to UOMs
}

model UOM {
  id                String          @id @default(cuid())
  name              String          @unique
  abbreviation      String          @unique
  conversionRate    Float
  baseUnit          Boolean         @default(false)
  unitCategoryId    String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  unitCategory      UnitCategory    @relation("UnitCategoryToUOMs", fields: [unitCategoryId], references: [id], onDelete: Cascade)
  purchaseItems     items[]         @relation("ItemPurchaseUnitOfMeasure")
  saleItems         items[]         @relation("ItemSalesUnitOfMeasure")
  items             items[]         @relation("ItemUnitOfMeasure")
  saleItemsUnit     SaleItems[]     @relation("ItemSalesUnitOfMeasure")
  purchaseItemsUnit PurchaseItems[] @relation("ItemPurchasesUnitOfMeasure")
}

model Attribute {
  id        String   @id @default(cuid())
  name      String   @unique
  value     String
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     items    @relation(fields: [itemId], references: [id])

  @@unique([name, itemId])
}

model orders {
  id            String         @id @default(cuid())
  series        String
  customerId    String
  status        String
  orderDate     DateTime       @default(now())
  deliveryDate  DateTime
  totalAmount   Float
  tax           Float
  grandTotal    Float
  totalQuantity Int
  internalNote  String?
  paymentTermId String?
  commissionId  String?
  fileNames     String[]
  adminApproval Boolean
  customer      customers      @relation(fields: [customerId], references: [id])
  paymentTerm   paymentTerms?
  commission    commissions?
  salesPartner  salesPartners? @relation(fields: [salesPartnersId], references: [id])
  orderItems    OrderItems[] // One-to-many relation with OrderItems

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  salesPartnersId String?
}

model OrderItems {
  id            String  @id @default(cuid())
  orderId       String
  itemId        String
  serviceId     String
  width         Float?
  height        Float?
  discount      Float
  level         Int
  totalAmount   Float
  adminApproval Boolean
  uomId         String
  quantity      Int
  unitPrice     Float
  description   String?
  status        String
  order         orders  @relation(fields: [orderId], references: [id]) // Relation back to orders

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model customers {
  id          String   @id @default(cuid())
  fullName    String   
  email       String?
  phone       String   
  company     String?
  address     String
  description String?
  orders      orders[] // One-to-many relation with orders

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fullName, phone, email])
}

model salesPartners {
  id          String        @id @default(cuid())
  fullName    String        @unique
  email       String?       @unique
  phone       String        @unique
  company     String?
  address     String
  description String?
  commissions commissions[] // One-to-many relation with commissions
  orders      orders[] // One-to-many relation with orders

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model paymentTerms {
  id              String                @id @default(cuid())
  orderId         String                @unique // One-to-one relation with orders, must be unique
  totalAmount     Float
  remainingAmount Float
  status          String
  forcePayment    Boolean
  order           orders                @relation(fields: [orderId], references: [id]) // Relation back to orders (fields defined here)
  transactions    paymentTransactions[] // One-to-many relation with paymentTransactions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model paymentTransactions {
  id            String       @id @default(cuid())
  date          DateTime
  orderId       String
  paymentTermId String
  paymentMethod String
  reference     String
  amount        Float
  status        String
  description   String?
  paymentTerm   paymentTerms @relation(fields: [paymentTermId], references: [id]) // Relation back to paymentTerms

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model commissions {
  id             String                   @id @default(cuid())
  orderId        String                   @unique // One-to-one relation with orders, must be unique
  salesPartnerId String
  amount         Float
  description    String?
  order          orders                   @relation(fields: [orderId], references: [id]) // Relation back to orders (fields defined here)
  salesPartner   salesPartners            @relation(fields: [salesPartnerId], references: [id]) // Relation to salesPartners
  transactions   commissionTransactions[] // One-to-many relation with commissionTransactions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model commissionTransactions {
  id            String      @id @default(cuid())
  orderId       String
  date          DateTime
  amount        Float
  percentage    Float
  commissionId  String
  paymentMethod String
  reference     String
  status        String
  description   String?
  commission    commissions @relation(fields: [commissionId], references: [id]) // Relation back to commissions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  RECEPTION
  GRAPHIC_DESIGNER
  OPERATOR
  FINANCE
  STORE_REPRESENTATIVE
}

enum UserMachinePermission {
  UV
  DTG
  EMBROIDERY
  LASER
  SCREEN_PRINTING
  HEAT_PRESS
  VINYL
  SUBLIMATION
}
