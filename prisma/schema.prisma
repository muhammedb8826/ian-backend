// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  confirm_password String
  passwordRT String?
  first_name      String?
  middle_name     String?
  last_name       String?
  gender    String    @default("MALE")
  phone String @unique
  address   String
  roles     Role      @default(ADMIN)
  profile String?
  machine_permissions UserMachinePermission[]
  is_active  Boolean   @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  machines             UserMachine[]
}

enum Role {
  USER
  ADMIN
  RECEPTION
  GRAPHIC_DESIGNER
  OPERATOR
  FINANCE
  STORE_REPRESENTATIVE
}

enum UserMachinePermission {
  UV
  DTG
  EMBROIDERY
  LASER
  SCREEN_PRINTING
  HEAT_PRESS
  VINYL
  SUBLIMATION
}

model machines {
  id        String  @id @default(cuid())
  name      String @unique
  status    Boolean @default(true)
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users                UserMachine[]
  items                items[]
}

model UserMachine {
  id        String  @id @default(cuid())
  user      users   @relation(fields: [userId], references: [id])
  userId    String
  machine   machines @relation(fields: [machineId], references: [id])
  machineId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, machineId])
}

model services {
  id        String  @id @default(cuid())
  name      String @unique
  status    Boolean @default(true)
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model items {
  id        String  @id @default(cuid())
  name      String @unique
  description String?
  reorder_level Int
  initial_stock Int
  updated_initial_stock Int
  can_be_sold Boolean @default(true)
  can_be_purchased Boolean @default(true)
  purchase_price Float
  selling_price Float
  unitOfMeasureId        String
  purchaseUnitOfMeasureId String
  machineId String
  machine   machines @relation(fields: [machineId], references: [id])
  unitOfMeasure          UOM     @relation("ItemUnitOfMeasure", fields: [unitOfMeasureId], references: [id])
  purchaseUnitOfMeasure  UOM     @relation("ItemPurchaseUnitOfMeasure", fields: [purchaseUnitOfMeasureId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UnitCategory {
  id        String  @id @default(cuid())
  name      String @unique
  description String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  units UOM[]
}

model UOM {
  id        String  @id @default(cuid())
  name            String @unique
  abbreviation    String @unique
  conversionRate  Float
  baseUnit       Boolean @default(false)
  unitCategoryId  String
  unitCategory    UnitCategory  @relation(fields: [unitCategoryId], references: [id])
  attributes      UOMAttribute[] // One-to-many relationship with UOMAttribute
  items               items[]       @relation("ItemUnitOfMeasure")
  purchaseItems       items[]       @relation("ItemPurchaseUnitOfMeasure")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UOMAttribute {
  id       String  @id @default(cuid())
  width      Float  @unique
  height    Float  @unique
  uomId    String
  uom      UOM     @relation(fields: [uomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}