generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                  String                  @id @default(cuid())
  email               String                  @unique
  password            String
  passwordRT          String?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  address             String
  first_name          String?
  gender              String                  @default("MALE")
  last_name           String?
  middle_name         String?
  phone               String                  @unique
  profile             String?
  roles               Role                    @default(ADMIN)
  confirm_password    String
  is_active           Boolean                 @default(true)
  machine_permissions UserMachinePermission[]
  machines            UserMachine[]
}

model machines {
  id          String        @id @default(cuid())
  name        String        @unique
  status      Boolean       @default(true)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserMachine[]
  items       items[]
}

model UserMachine {
  id        String   @id @default(cuid())
  userId    String
  machineId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  machine   machines @relation(fields: [machineId], references: [id])
  user      users    @relation(fields: [userId], references: [id])

  @@unique([userId, machineId])
}

model services {
  id          String   @id @default(cuid())
  name        String   @unique
  status      Boolean  @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model items {
  id                      String   @id @default(cuid())
  name                    String   @unique
  description             String?
  reorder_level           Int
  initial_stock           Int
  updated_initial_stock   Int
  machineId               String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  can_be_purchased        Boolean  @default(true)
  can_be_sold             Boolean  @default(true)
  purchaseUnitOfMeasureId String
  purchase_price          Float
  selling_price           Float
  unitOfMeasureId         String
  machine                 machines @relation(fields: [machineId], references: [id])
  purchaseUnitOfMeasure   UOM      @relation("ItemPurchaseUnitOfMeasure", fields: [purchaseUnitOfMeasureId], references: [id])
  unitOfMeasure           UOM      @relation("ItemUnitOfMeasure", fields: [unitOfMeasureId], references: [id])

  attributes            Attribute[]
}

model UnitCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  units       UOM[]
}

model UOM {
  id             String         @id @default(cuid())
  name           String         @unique
  abbreviation   String         @unique
  conversionRate Float
  baseUnit       Boolean        @default(false)
  unitCategoryId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  unitCategory   UnitCategory   @relation(fields: [unitCategoryId], references: [id])
  purchaseItems  items[]        @relation("ItemPurchaseUnitOfMeasure")
  items          items[]        @relation("ItemUnitOfMeasure")
}

model Attribute {
  id        String   @id @default(cuid())
  name      String
  value     String
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items      items     @relation(fields: [itemId], references: [id])

  @@unique([name, itemId])
}

enum Role {
  USER
  ADMIN
  RECEPTION
  GRAPHIC_DESIGNER
  OPERATOR
  FINANCE
  STORE_REPRESENTATIVE
}

enum UserMachinePermission {
  UV
  DTG
  EMBROIDERY
  LASER
  SCREEN_PRINTING
  HEAT_PRESS
  VINYL
  SUBLIMATION
}
