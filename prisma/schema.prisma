generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  password               String
  passwordRT             String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  address                String
  first_name             String?
  gender                 String                  @default("MALE")
  last_name              String?
  middle_name            String?
  phone                  String                  @unique
  profile                String?
  roles                  Role                    @default(ADMIN)
  confirm_password       String
  is_active              Boolean                 @default(true)
  machine_permissions    UserMachinePermission[]
  machines               UserMachine[]
  purchaseRepresentative purchases[]
  notes                  PurchaseItemNote[]      @relation("UserNotes")
}

model machines {
  id          String        @id @default(cuid())
  name        String        @unique
  status      Boolean       @default(true)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserMachine[]
  items       items[]
}

model UserMachine {
  id        String   @id @default(cuid())
  userId    String
  machineId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  machine   machines @relation(fields: [machineId], references: [id])
  user      users    @relation(fields: [userId], references: [id])

  @@unique([userId, machineId])
}

model services {
  id          String   @id @default(cuid())
  name        String   @unique
  status      Boolean  @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model items {
  id                      String          @id @default(cuid())
  name                    String          @unique
  description             String?
  reorder_level           Int
  initial_stock           Int
  updated_initial_stock   Int
  machineId               String
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  can_be_purchased        Boolean         @default(true)
  can_be_sold             Boolean         @default(true)
  purchase_price          Float
  selling_price           Float
  purchaseUnitOfMeasureId String?
  unitOfMeasureId         String?
  quantity                Int
  machine                 machines        @relation(fields: [machineId], references: [id])
  purchaseUnitOfMeasure   UOM?            @relation("ItemPurchaseUnitOfMeasure", fields: [purchaseUnitOfMeasureId], references: [id])
  unitOfMeasure           UOM?            @relation("ItemUnitOfMeasure", fields: [unitOfMeasureId], references: [id])
  attributes              Attribute[]
  purchases               PurchaseItems[] @relation("PurchaseItemsForItem")
}

model purchases {
  id                       String          @id @default(cuid())
  series                   String
  vendorId                 String
  purchaseRepresentativeId String
  status                   String
  orderDate                DateTime        @default(now())
  paymentMethod            String
  amount                   Float
  reference                String
  totalAmount              Float
  totalQuantity            Int
  note                     String?
  items                    PurchaseItems[] @relation("PurchaseItemsForPurchase")
  vendor                   vendors         @relation(fields: [vendorId], references: [id])
  purchaseRepresentative   users           @relation(fields: [purchaseRepresentativeId], references: [id])
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
}

model PurchaseItems {
  id          String             @id @default(cuid())
  purchaseId  String
  itemId      String
  quantity    Int
  unitPrice   Float
  amount      Float
  description String?
  status      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  item        items              @relation("PurchaseItemsForItem", fields: [itemId], references: [id])
  purchase    purchases          @relation("PurchaseItemsForPurchase", fields: [purchaseId], references: [id])
  notes       PurchaseItemNote[] @relation("PurchaseItemNotes")

  @@unique([purchaseId, itemId])
}

model PurchaseItemNote {
  id     String        @id @default(cuid())
  text   String
  itemId String
  userId String
  date   DateTime
  hour   DateTime
  item   PurchaseItems @relation("PurchaseItemNotes", fields: [itemId], references: [id])
  user   users         @relation("UserNotes", fields: [userId], references: [id])

  @@index([itemId])
  @@index([userId])
}

model vendors {
  id          String      @id @default(cuid())
  fullName    String      @unique
  email       String?     @unique
  phone       String      @unique
  company     String
  address     String
  reference   String
  description String?
  purchases   purchases[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model UnitCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  units       UOM[]
}

model UOM {
  id             String       @id @default(cuid())
  name           String       @unique
  abbreviation   String       @unique
  conversionRate Float
  baseUnit       Boolean      @default(false)
  unitCategoryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  unitCategory   UnitCategory @relation(fields: [unitCategoryId], references: [id])
  purchaseItems  items[]      @relation("ItemPurchaseUnitOfMeasure")
  items          items[]      @relation("ItemUnitOfMeasure")
}

model Attribute {
  id        String   @id @default(cuid())
  name      String
  value     String
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     items    @relation(fields: [itemId], references: [id])

  @@unique([name, itemId])
}

enum Role {
  USER
  ADMIN
  RECEPTION
  GRAPHIC_DESIGNER
  OPERATOR
  FINANCE
  STORE_REPRESENTATIVE
}

enum UserMachinePermission {
  UV
  DTG
  EMBROIDERY
  LASER
  SCREEN_PRINTING
  HEAT_PRESS
  VINYL
  SUBLIMATION
}
