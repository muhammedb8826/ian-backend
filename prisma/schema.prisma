generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  passwordRT        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  address           String
  first_name        String?
  gender            String             @default("MALE")
  last_name         String?
  middle_name       String?
  phone             String             @unique
  profile           String?
  roles             Role               @default(ADMIN)
  confirm_password  String
  is_active         Boolean            @default(true)
  machines          UserMachine[]
  purchaser         purchases[]
  operator          sales[]
  purchaseItemNotes PurchaseItemNote[] @relation("UserNotes")
  salesNotes        SalesItemNote[]    @relation("UserSalesNotes")
  orderItemNotes    OrderItemNotes[]
}

model machines {
  id          String        @id @default(cuid())
  name        String        @unique
  status      Boolean       @default(true)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserMachine[]
  items       items[]
}

model UserMachine {
  id        String   @id @default(cuid())
  userId    String
  machineId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  machine   machines @relation(fields: [machineId], references: [id])
  user      users    @relation(fields: [userId], references: [id])

  @@unique([userId, machineId])
}

model Pricing {
  id           String   @id @default(cuid())
  itemId       String
  serviceId    String
  sellingPrice Float
  constant    Boolean  @default(false)
  width        Float?
  height       Float?
  baseUomId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  service      services @relation(fields: [serviceId], references: [id])
  item         items    @relation(fields: [itemId], references: [id])

  uom          UOM     @relation(fields: [baseUomId], references: [id])
  orderItems   OrderItems[] // One-to-many relation with OrderItems
  @@unique([itemId, serviceId])
}

model services {
  id          String    @id @default(cuid())
  name        String    @unique
  status      Boolean   @default(true)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       items[]
  pricing     Pricing[]
}

model discounts {
  id         String   @id @default(cuid())
  level      Int
  unit       Float
  percentage Float
  itemId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([itemId, level])
}

model items {
  id                    String          @id @default(cuid())
  name                  String          @unique
  description           String?
  reorder_level         Int
  initial_stock         Int
  updated_initial_stock Int
  machineId             String
  unitCategoryId        String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  can_be_purchased      Boolean         @default(true)
  can_be_sold           Boolean         @default(true)
  purchaseUomId         String?
  defaultUomId          String?
  quantity              Int
  machine               machines        @relation(fields: [machineId], references: [id])
  purchaseUom           UOM?            @relation("ItemPurchaseUom", fields: [purchaseUomId], references: [id])
  defaultUom            UOM?            @relation("ItemDefaultUom", fields: [defaultUomId], references: [id])
  unitCategory          UnitCategory?   @relation("UnitCategoryToItems", fields: [unitCategoryId], references: [id])
  attributes            Attribute[]
  purchases             PurchaseItems[] @relation("PurchaseItemsForItem")
  sales                 SaleItems[]     @relation("SaleItemsForItem")
  operatorStock         OperatorStock[]
  services              services[]
  OrderItems            OrderItems[]
  pricing               Pricing[]
}

model purchases {
  id            String          @id @default(cuid())
  series        String
  vendorId      String
  purchaserId   String
  status        String
  orderDate     DateTime        @default(now())
  paymentMethod String
  amount        Float
  reference     String
  totalAmount   Float
  totalQuantity Int
  note          String?
  purchaseItems PurchaseItems[] @relation("PurchaseItemsForPurchase")
  vendor        vendors         @relation(fields: [vendorId], references: [id])
  purchaser     users           @relation(fields: [purchaserId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model PurchaseItems {
  id                String             @id @default(cuid())
  purchaseId        String
  itemId            String
  baseUomId         String
  unit             Float
  uomId            String
  quantity          Int
  unitPrice         Float
  amount            Float
  description       String?
  status            String
  item              items              @relation("PurchaseItemsForItem", fields: [itemId], references: [id])
  purchase          purchases          @relation("PurchaseItemsForPurchase", fields: [purchaseId], references: [id])
  purchaseItemNotes PurchaseItemNote[] @relation("PurchaseItemNotes")
  uoms             UOM                @relation("ItemPurchasesUnitOfMeasure", fields: [uomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([purchaseId, itemId])
}

model PurchaseItemNote {
  id             String        @id @default(cuid())
  text           String
  hour           DateTime
  date           DateTime
  userId         String
  purchaseItemId String
  purchaseItem   PurchaseItems @relation("PurchaseItemNotes", fields: [purchaseItemId], references: [id])
  user           users         @relation("UserNotes", fields: [userId], references: [id])

  @@index([purchaseItemId])
  @@index([userId])
}

model sales {
  id            String      @id @default(cuid())
  series        String
  operatorId    String
  status        String
  orderDate     DateTime    @default(now())
  totalQuantity Int
  note          String?
  saleItems     SaleItems[] @relation("SaleItemsForSale")
  operator      users       @relation(fields: [operatorId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model SaleItems {
  id            String          @id @default(cuid())
  saleId        String
  itemId        String
  baseUomId     String
  unit          Float
  uomId         String
  quantity      Int
  description   String?
  status        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  item          items           @relation("SaleItemsForItem", fields: [itemId], references: [id])
  sale          sales           @relation("SaleItemsForSale", fields: [saleId], references: [id])
  saleItemNotes SalesItemNote[] @relation("SaleItemNotes")
  uoms          UOM             @relation("ItemSalesUnitOfMeasure", fields: [uomId], references: [id])
}

model SalesItemNote {
  id         String    @id @default(cuid())
  text       String
  hour       DateTime
  date       DateTime
  userId     String
  saleItemId String
  saleItem   SaleItems @relation("SaleItemNotes", fields: [saleItemId], references: [id])
  user       users     @relation("UserSalesNotes", fields: [userId], references: [id])

  @@index([saleItemId])
  @@index([userId])
}

model OperatorStock {
  id          String  @id @default(cuid())
  itemId      String
  uomId      String
  quantity    Int
  baseUomId     String
  unit          Float
  description String?
  status      String

  uoms        UOM     @relation(fields: [uomId], references: [id])
  item      items    @relation(fields: [itemId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model vendors {
  id          String      @id @default(cuid())
  fullName    String      @unique
  email       String?     @unique
  phone       String      @unique
  company     String
  address     String
  reference   String
  description String?
  purchases   purchases[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model UnitCategory {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String
  constant      Boolean
  constantValue Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  items         items[]  @relation("UnitCategoryToItems") // One-to-many relation
  uoms         UOM[]    @relation("UnitCategoryToUOMs") // One-to-many relation to UOMs
}

model UOM {
  id             String          @id @default(cuid())
  name           String
  abbreviation   String
  conversionRate Float
  baseUnit       Boolean         @default(false)
  unitCategoryId String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  unitCategory   UnitCategory    @relation("UnitCategoryToUOMs", fields: [unitCategoryId], references: [id], onDelete: Restrict)
  purchaseUom    items[]         @relation("ItemPurchaseUom") // One-to-many relation with items
  defaultUom     items[]         @relation("ItemDefaultUom") // One-to-many relation with items
  purchaseItems  PurchaseItems[] @relation("ItemPurchasesUnitOfMeasure") // One-to-many relation with PurchaseItems
  saleItems      SaleItems[]     @relation("ItemSalesUnitOfMeasure") // One-to-many relation with SaleItems
  operatorStock OperatorStock[] // One-to-many relation with OperatorStock
  pricing        Pricing[]       // One-to-many relation with Pricing
  orderItems     OrderItems[]    // One-to-many relation with OrderItems

  @@unique([name, abbreviation, unitCategoryId])
}

model Attribute {
  id        String   @id @default(cuid())
  name      String   @unique
  value     String
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     items    @relation(fields: [itemId], references: [id])

  @@unique([name, itemId])
}

model orders {
  id              String         @id @default(cuid())
  series          String
  customerId      String
  status          String
  orderDate       DateTime       @default(now())
  deliveryDate    DateTime
  totalAmount     Float
  orderSource     String
  tax             Float
  grandTotal      Float
  totalQuantity   Int
  internalNote    String?
  paymentTermId   String?
  commissionId    String?
  fileNames       String[]
  adminApproval   Boolean
  customer        customers      @relation(fields: [customerId], references: [id])
  paymentTerm     paymentTerms?
  commission      commissions?
  salesPartner    salesPartners? @relation(fields: [salesPartnersId], references: [id])
  orderItems      OrderItems[] // One-to-many relation with OrderItems
  salesPartnersId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItems {
  id             String           @id @default(cuid())
  orderId        String
  itemId         String
  serviceId      String
  pricingId      String
  width          Float?
  height         Float?
  discount       Float?
  level          Int
  totalAmount    Float
  adminApproval  Boolean
  uomId          String
  baseUomId         String
  unit             Float
  quantity       Int
  unitPrice      Float
  description    String?
  isDiscounted   Boolean
  status         String
  order          orders           @relation(fields: [orderId], references: [id]) // Relation back to orders
  item           items            @relation(fields: [itemId], references: [id])
  orderItemNotes OrderItemNotes[]
  pricing     Pricing          @relation(fields: [pricingId], references: [id])
  uom         UOM              @relation(fields: [uomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, itemId, serviceId])
}

model OrderItemNotes {
  id          String     @id @default(cuid())
  text        String
  hour        DateTime // Time of note creation
  date        DateTime // Date of note creation
  userId      String
  user        users      @relation(fields: [userId], references: [id]) // Relation to the User who created the note
  orderItemId String
  orderItem   OrderItems @relation(fields: [orderItemId], references: [id]) // Relation to OrderItems

  createdAt DateTime @default(now())
}

model customers {
  id          String   @id @default(cuid())
  fullName    String
  email       String?  @unique
  phone       String   @unique
  company     String?
  address     String
  description String?
  orders      orders[] // One-to-many relation with orders

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model salesPartners {
  id          String        @id @default(cuid())
  fullName    String
  email       String?       @unique
  phone       String        @unique
  company     String?
  address     String
  description String?
  commissions commissions[] // One-to-many relation with commissions
  orders      orders[] // One-to-many relation with orders

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model paymentTerms {
  id              String                @id @default(cuid())
  orderId         String                @unique // One-to-one relation with orders, must be unique
  totalAmount     Float
  remainingAmount Float
  status          String
  forcePayment    Boolean
  order           orders                @relation(fields: [orderId], references: [id], onDelete: Cascade) // Relation back to orders // Relation back to orders (fields defined here)
  transactions    paymentTransactions[] // One-to-many relation with paymentTransactions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model paymentTransactions {
  id            String       @id @default(cuid())
  date          DateTime
  paymentTermId String
  paymentMethod String
  reference     String
  amount        Float
  status        String
  description   String?
  paymentTerm   paymentTerms @relation(fields: [paymentTermId], references: [id], onDelete: Cascade) // Relation back to paymentTerms

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model commissions {
  id             String                   @id @default(cuid())
  orderId        String                   @unique // One-to-one relation with orders, must be unique
  salesPartnerId String
  totalAmount    Float
  order          orders                   @relation(fields: [orderId], references: [id], onDelete: Cascade) // Relation back to orders (fields defined here)
  salesPartner   salesPartners            @relation(fields: [salesPartnerId], references: [id], onDelete: Cascade) // Relation to salesPartners
  transactions   commissionTransactions[] // One-to-many relation with commissionTransactions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model commissionTransactions {
  id            String      @id @default(cuid())
  date          DateTime
  amount        Float
  percentage    Float
  commissionId  String
  paymentMethod String
  reference     String
  status        String
  description   String?
  commission    commissions @relation(fields: [commissionId], references: [id], onDelete: Cascade) // Relation back to commissions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  RECEPTION
  GRAPHIC_DESIGNER
  OPERATOR
  FINANCE
  STORE_REPRESENTATIVE
  PURCHASER
}
